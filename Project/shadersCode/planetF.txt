#version 330 core
out vec4 FragColor;
precision mediump float; 
in vec3 v_frag_coord;
in vec3 v_normal;  
in vec2 v_tex; 
uniform vec3 u_view_pos;
uniform vec3 u_light_color;
uniform sampler2D u_texture; 
uniform float var_light;
struct Light{
vec3 light_pos;
float ambient_strength;
float diffuse_strength;
float specular_strength;  
};
uniform Light light;
uniform float shininess;
float specularCalculation(vec3 N, vec3 L, vec3 V){ 
vec3 R = reflect (-L,N); //compute reflection direction
float cosTheta = dot(R,V); //cosinus between reflection direction and the view
float spec = pow(max(cosTheta,0.0), shininess);
return light.specular_strength * spec; //do not forget to multiply by the strength
}
void main() { //Phong lighting
vec3 N = normalize(v_normal); //normalize the three vectors
vec3 L = normalize(light.light_pos - v_frag_coord);
vec3 V = normalize(u_view_pos - v_frag_coord);
float specular = specularCalculation(N, L, V);
float diffuse = light.diffuse_strength * max(dot(N,L),0.0); //max of cos(angle between light and normal) and 0, because no negative light
vec3 res_light = var_light * (u_light_color* vec3(diffuse +specular)); //we sum diffuse and specular contribution and include the light color, then we make the intensity vary
res_light = res_light + vec3(light.ambient_strength); //we add some ambient light
FragColor = vec4(res_light, 1.0) * texture(u_texture, v_tex); //we multiply the texture with the light we computed.
}