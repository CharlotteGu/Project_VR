#version 330 core
out vec4 FragColor;
precision mediump float; 
in vec3 v_frag_coord;
in vec3 v_normal;  
in vec2 v_tex; 
uniform vec3 u_view_pos;
uniform vec3 u_light_color;
uniform sampler2D u_texture; 
struct Light{
vec3 light_pos;
float ambient_strength;
float diffuse_strength;
float specular_strength;  
};
uniform Light light;
uniform float shininess;
float specularCalculation(vec3 N, vec3 L, vec3 V){
vec3 R = reflect (-L,N);
float cosTheta = dot(R,V);
float spec = pow(max(cosTheta,0.0), shininess);
return light.specular_strength * spec;    
}
void main() { 
vec3 N = normalize(v_normal);
vec3 L = normalize(light.light_pos - v_frag_coord);
vec3 V = normalize(u_view_pos - v_frag_coord);
float specular = specularCalculation(N, L, V);
float diffuse = light.diffuse_strength * max(dot(N,L),0.0);
vec3 res_light = u_light_color* vec3(diffuse + light.ambient_strength +specular);
FragColor = vec4(res_light, 1.0) * texture(u_texture, v_tex); 
}